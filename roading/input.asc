// new module script
static InputParams* InputParams::NewInputParams(float turn_speed, float max_speed_forward, float  max_speed_forward_road, float  max_speed_forward_dirt, float max_speed_backward)
{
  InputParams* ip = new InputParams;
  ip.TurnSpeed = turn_speed;
  ip.MaxSpeedForward = max_speed_forward;
  ip.MaxSpeedForwardRoad = max_speed_forward_road;
  ip.MaxSpeedForwardDirt = max_speed_forward_dirt;
  ip.MaxSpeedBackward = max_speed_backward;
  return ip;
}


void input_car(Mode7Object* m7o_car, InputParams* p) {
  int mx = mouse.x;
  int my = mouse.y;
  
  m7o_car.Angle += IntToFloat(mx-Screen.Width/2)/4.0;
  p.AngleX += IntToFloat(my-Screen.Height/2)/4.0;
  mouse.SetPosition(Screen.Width/2, Screen.Height/2);
  
  // steer kart
  float factor;
  float max_factor = 1.5;
  if (p.CurrentSpeed == 0.0) factor = 0.0;
  else factor = 0.9 * p.MaxSpeedForward / p.CurrentSpeed;
  if (factor > max_factor) factor = max_factor;
  if (factor < -max_factor) factor = -max_factor;
  
  // move kart
  float sin = Maths.Sin(Maths.DegreesToRadians(m7o_car.Angle));
  float cos = Maths.Cos(Maths.DegreesToRadians(m7o_car.Angle));
  
  
  float side_step = 0.25;
  if (IsKeyPressed(eKeyA)) {
    float sin_ortho = Maths.Sin(Maths.DegreesToRadians(m7o_car.Angle)-Maths.Pi/2.0);
    float cos_ortho = Maths.Cos(Maths.DegreesToRadians(m7o_car.Angle)-Maths.Pi/2.0);
    
    m7o_car.X += side_step * sin_ortho;
    m7o_car.Z -= side_step * cos_ortho;
  }
  if (IsKeyPressed(eKeyD)) {
    float sin_ortho = Maths.Sin(Maths.DegreesToRadians(m7o_car.Angle)+Maths.Pi/2.0);
    float cos_ortho = Maths.Cos(Maths.DegreesToRadians(m7o_car.Angle)+Maths.Pi/2.0);
  
    m7o_car.X += side_step * sin_ortho;
    m7o_car.Z -= side_step * cos_ortho;
  }
  
  float target_speed = 0.0;
  if (IsKeyPressed(eKeyW) && !IsKeyPressed(eKeyS)) {
    target_speed = p.MaxSpeedForward;
  }
  if (IsKeyPressed(eKeyS) && !IsKeyPressed(eKeyW)) {
    if (p.CurrentSpeed <= 0.4) target_speed = -p.MaxSpeedBackward;
  }
  p.CurrentSpeed += (target_speed - p.CurrentSpeed) * 0.05;
  if (p.CurrentSpeed > -0.1 && p.CurrentSpeed < 0.1) p.CurrentSpeed = 0.0;
  
  m7o_car.X += p.CurrentSpeed * sin;
  m7o_car.Z -= p.CurrentSpeed * cos;
}

void input_player(Mode7Object* m7o_player, InputParams* p) {
  int mx = mouse.x;
  int my = mouse.y;
  
  m7o_player.Angle += IntToFloat(mx-Screen.Width/2)/4.0;
  p.AngleX += IntToFloat(my-Screen.Height/2)/4.0;
  mouse.SetPosition(Screen.Width/2, Screen.Height/2);
  
  // steer kart
  float factor;
  float max_factor = 1.5;
  if (p.CurrentSpeed == 0.0) factor = 0.0;
  else factor = 0.9 * p.MaxSpeedForward / p.CurrentSpeed;
  if (factor > max_factor) factor = max_factor;
  if (factor < -max_factor) factor = -max_factor;
  
  // move kart
  float sin = Maths.Sin(Maths.DegreesToRadians(m7o_player.Angle));
  float cos = Maths.Cos(Maths.DegreesToRadians(m7o_player.Angle));
  
  
  float side_step = 0.25;
  if (IsKeyPressed(eKeyA)) {
    float sin_ortho = Maths.Sin(Maths.DegreesToRadians(m7o_player.Angle)-Maths.Pi/2.0);
    float cos_ortho = Maths.Cos(Maths.DegreesToRadians(m7o_player.Angle)-Maths.Pi/2.0);
    
    m7o_player.X += side_step * sin_ortho;
    m7o_player.Z -= side_step * cos_ortho;
  }
  if (IsKeyPressed(eKeyD)) {
    float sin_ortho = Maths.Sin(Maths.DegreesToRadians(m7o_player.Angle)+Maths.Pi/2.0);
    float cos_ortho = Maths.Cos(Maths.DegreesToRadians(m7o_player.Angle)+Maths.Pi/2.0);
  
    m7o_player.X += side_step * sin_ortho;
    m7o_player.Z -= side_step * cos_ortho;
  }
  

  float target_speed = 0.0;
  if (IsKeyPressed(eKeyW) && !IsKeyPressed(eKeyS)) {
    target_speed = p.MaxSpeedForward;
  }
  if (IsKeyPressed(eKeyS) && !IsKeyPressed(eKeyW)) {
    if (p.CurrentSpeed <= 0.4) target_speed = -p.MaxSpeedBackward;
  }
  p.CurrentSpeed += (target_speed - p.CurrentSpeed) * 0.05;
  if (p.CurrentSpeed > -0.1 && p.CurrentSpeed < 0.1) p.CurrentSpeed = 0.0;
  
  m7o_player.X += p.CurrentSpeed * sin;
  m7o_player.Z -= p.CurrentSpeed * cos;
  
}